{
  
    
        "post0": {
            "title": "Stokes flow bounded by a plane surface",
            "content": "Irreducible active flows in unbounded domain . The expression of fluid flow can be written in terms of modes of the force per unit area and surface slip. . We emphasise that these expressions are valid for any Green&#39;s function of the Stokes equation, provided they satisfy the additional boundary conditions that may be imposed. For this example, we choose an unbounded domain with the flow vanishing at infinity, for which the Green&#39;s function is the Oseen tensor, . %%capture !pip install pystokes . %matplotlib inline import pystokes import numpy as np, matplotlib.pyplot as plt . # particle radius, fluid viscosity, and number of particles b, eta, Np = 1.0, 1.0/6.0, 1 #initialise position, orientation and body force on the colloid r, p, F = np.array([0.0, 0.0, 0.0]), np.array([0.0, -1.0, 0]), np.array([0.0, 1.0, 0]) # irreducible coeffcients V2s = pystokes.utils.irreducibleTensors(2, p) V3t = pystokes.utils.irreducibleTensors(1, p) . # space dimension , extent , discretization dim, L, Ng = 3, 10, 100; # instantiate the Flow class flow = pystokes.unbounded.Flow(radius=b, particles=Np, viscosity=eta, gridpoints=Ng*Ng) . plt.figure(figsize=(15, 10), edgecolor=&#39;gray&#39;, linewidth=4) # create the grid rr, vv = pystokes.utils.gridXY(dim, L, Ng) plt.subplot(231); vv=vv*0; flow.flowField1s(vv, rr, r, F) pystokes.utils.plotStreamlinesXY(vv, rr, r, offset=6e-1, title=&#39;lσ = 1s&#39;, density=2) plt.subplot(232); vv=vv*0; flow.flowField2s(vv, rr, r, V2s) pystokes.utils.plotStreamlinesXY(vv, rr, r, offset=4e-2, title=&#39;lσ = 2s&#39;, density=2) plt.subplot(233); vv=vv*0; flow.flowField3t(vv, rr, r, V3t) pystokes.utils.plotStreamlinesXY(vv, rr, r, offset=4e-4, title=&#39;lσ = 3t&#39;, density=2) .",
            "url": "https://rajeshrinet.github.io/pystokes-blog/jupyter/2020/07/21/unboundedFlow.html",
            "relUrl": "/jupyter/2020/07/21/unboundedFlow.html",
            "date": " • Jul 21, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Stokes flow bounded by a plane surface",
            "content": "Irreducible active flows: effect of plane boundaries . Our second example illustrates how irreducible flows are modified by the proximity to plane boundaries. This is of relevance to experiments, where confinement by boundaries is commonplace [#goldstein2015green, #thutupalli2018FIPS]. This also illustrates the flexibility of our method, as the only quantity that needs to be changed is the Green&#39;s function. The Green&#39;s function for a no-slip wall is the Lorentz-Blake tensor . %%capture !pip install pystokes . %matplotlib inline import pystokes import numpy as np, matplotlib.pyplot as plt . # particle radius, fluid viscosity, and number of particles b, eta, Np = 1.0, 1.0/6.0, 1 #initialise position, orientation and body force on the colloid r, p, F = np.array([0.0, 0.0, 3.4]), np.array([0.0, 0.0, -1]), np.array([0.0, 0.0, 1]) # irreducible coeffcients V2s = pystokes.utils.irreducibleTensors(2, p) V3t = pystokes.utils.irreducibleTensors(1, p) . # space dimension , extent , discretization dim, L, Ng = 3, 10, 128 #Instantiate the Flow class near a planw wall and interface wFlow = pystokes.wallBounded.Flow(radius=b, particles=Np, viscosity=eta, gridpoints=Ng*Ng) iFlow = pystokes.interface.Flow(radius=b, particles=Np, viscosity=eta, gridpoints=Ng*Ng) . plt.figure(figsize=(24, 8), edgecolor=&#39;gray&#39;, linewidth=4) # create the grid rr, vv = pystokes.utils.gridYZ(dim, L, Ng) plt.subplot(231); vv=vv*0; wFlow.flowField1s(vv, rr, r, F) pystokes.utils.plotStreamlinesYZsurf(vv, rr, r, ms=44,offset=1e-1, title=&#39;lσ = 1s&#39;, density=2) plt.subplot(232); vv=vv*0; wFlow.flowField2s(vv, rr, r, V2s) pystokes.utils.plotStreamlinesYZsurf(vv, rr, r, ms=44, offset=1e-1, title=&#39;lσ = 2s&#39;, density=2) plt.subplot(233); vv=vv*0; wFlow.flowField3t(vv, rr, r, V3t) pystokes.utils.plotStreamlinesYZsurf(vv, rr, r, ms=44,offset=4e-2, title=&#39;lσ = 3t&#39;, density=2) plt.subplot(234); vv=vv*0; iFlow.flowField1s(vv, rr, r, F) pystokes.utils.plotStreamlinesYZsurf(vv, rr, r, ms=44,offset=4e-1, title=&#39;None&#39;, density=2) plt.subplot(235); vv=vv*0; iFlow.flowField2s(vv, rr, r, V2s) pystokes.utils.plotStreamlinesYZsurf(vv, rr, r, ms=44,offset=1e-1, title=&#39;None&#39;, density=2) plt.subplot(236); vv=vv*0; iFlow.flowField3t(vv, rr, r, V3t) pystokes.utils.plotStreamlinesYZsurf(vv, rr, r, ms=44,offset=6e-2, title=&#39;None&#39;, density=2) .",
            "url": "https://rajeshrinet.github.io/pystokes-blog/jupyter/2020/07/20/flowPlaneSurface.html",
            "relUrl": "/jupyter/2020/07/20/flowPlaneSurface.html",
            "date": " • Jul 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "PyStokes",
            "content": "About . . PyStokes is a numerical library for phoresis and Stokesian hydrodynamics in Python. It uses a grid-free method, combining the integral representation of Laplace and Stokes equations, spectral expansion, and Galerkin discretization, to compute phoretic and hydrodynamic interactions between spheres with slip boundary conditions on their surfaces. The library also computes suspension scale quantities, such as rheological response, energy dissipation and fluid flow. The computational cost is quadratic in the number of particles and upto 1e5 particles have been accommodated on multicore computers. The library has been used to model suspensions of microorganisms, synthetic autophoretic particles and self-propelling droplets. . Active particles . The PyStokes library has been specifically designed for studying phoretic and hydrodynamic interactions in suspensions of active particles. Active particles are a new class of colloids which create flow - even when stationary - due to large surface gradients from local nonequilibrium processes. These nonequilibrium processes may be due to the motion of cilia, as in microorganisms (Brennen &amp; Winet, 1977) or osmotic flows of various kinds in response to spontaneously generated gradients of phoretic fields (Ebbens &amp; Howse, 2010) at the colloidal particle. The latter, often called autophoresis, is a generalisation of well-known phoretic phenomena including, inter alia, electrophoresis (electric field), diffusiophoresis (chemical field) and thermophoresis (temperature field) that occur in response to externally imposed gradients of phoretic fields (Anderson, 1989). . Hydrodynamic and phoretic interactions between active particles in a viscous fluid are central to the understanding of their collective dynamics. Under experimentally relevant conditions, the motion of the fluid is governed by the Stokes equation and that of the phoretic field, if one is present, by the Laplace equation. The “activity” appears in these equations as boundary conditions on the particle surfaces that prescribe the slip velocity in the Stokes equation and flux of the phoretic field in the Laplace equation . . The slip velocity and the phoretic flux are related by a linear constitutive law that can be derived from a detailed analysis of the boundary layer physics (Anderson, 1989). The Stokes and Laplace equations are coupled by this linear constitutive law only at the particle boundaries. The linearity of the governing equations and the coupling boundary conditions allows for a formally exact solution of the problem of determining the force per unit area on the particle surfaces. This formally exact solution can be approximated to any desired degree of accuracy by a truncated series expansion in a complete basis of functions on the particle boundaries. This, in turn, leads to an efficient and accurate numerical method for computing hydrodynamic and phoretic interactions between active particles. . . Research applications of PyStokes . In what follows, we present we present a selected list of research applications of PyStokes. . Controlled optofluidic crystallization of colloids tethered at interfaces . Reference: A Caciagli, R Singh, D Joshi, R Adhikari, and E Eiser, Physical Review Letters 125 (6), 068001 (2020) . . The interplay between laser light, trapped particles, and fluid flow can produce counterintuitive effects in optical tweezing. Here we uncover an attractive, long-ranged, non-equilibrium force field centered on an optically trapped particle near a water-oil interface, produced by local heating and mediated by global fluid flow. This causes surrounding untrapped colloids, tethered to the interface but allowed to diffusely freely along it, to crystallize around the force center. In this configuration, the non-equilibrium force is the gradient of a potential, of strength proportional to the local heating, which, surprisingly, allows for an effective equilibrium description. Our results open unexplored routes to optofluidic manipulation and assembly of colloidal particles. . See synopsis: Small Spheres Freeze When Hot . . Periodic orbits of active particles . Reference: A Bolitho, R Singh, R Adhikari, Physical Review Letters 124 (8), 088003 (2020) . . Our work shows that the oscillatory dynamics of a pair of active particles near a boundary, best exemplified by the fascinating dance of the green algae Volvox, can be understood in terms of Hamiltonian mechanics, even though the system does not conserve energy. At the heart of this dance, which is a limit cycle of a dynamical system, is a Hamiltonian, damped by gravitational torque and driven by fluid flow reflected off the boundary. For small oscillations, this Hamiltonian is identical to that of a pendulum and, like a metronome, sets the beat of the dance. For large oscillations, the beat can be evaluated with the same mathematics as for a pendulum, and when damping and driving are taken into account, agrees very well with experiment. This establishes without doubt that the enigmatic Volvox dance, rather than being an evolutionarily selected biological phenomenon, is a physical phenomenon that can be understood fully in terms of the familiar concepts of mechanics. Our study highlights the significance of fluid flows and their distortion by boundaries in active matter and shows that the applicability of Hamiltonian mechanics extends beyond its intended domain of energy-conserving systems to time-irreversible, dissipative, active systems. . . Crystallization at a plane no-slip surface . Reference: R Singh, R Adhikari, Physical Review Letters 117, 228002 (2016) . . It is well-known that crystallization of colloids approximating hard spheres is due, paradoxically, to the higher entropy of the ordered crystalline state compared to that of the disordered liquid state. Out of equilibrium, no such general principle is available to rationalize crystallization. Here, we identify a new non-equilibrium mechanism, associated with entropy production rather than entropy gain, which drives crystallization of active colloids near plane walls. This is a new mechanism of spontaneous symmetry breaking, with no analogue in equilibrium. The properties of the non-equilibrium crystal, consequently, show remarkable exceptions: strong dissipation suppresses propagating phonon-modes and turns them diffusive, yet, activity enhances the elastic moduli of the crystal. An active crystal, then, has reduced phase fluctuations and is less susceptible to the destruction of long-ranged order, even though it is two-dimensional. The investigation of topological phase transitions in these systems presents, therefore, exciting avenues for future research. There is an excellent qualitative and quantitative match of our results with two recent experiments. . Kinetics of crystallization . . Attractive monopolar flow of active particles near a plane surface . . Self-assembly of hexagonal cluster of active particles . . . Flow-induced phase separation is controlled by boundary conditions . Reference: S Thutupalli, D Geyer, R Singh, R Adhikari, H Stone Proceedings of the National Academy of Sciences 115, 5403 (2018) . Active colloids - microorganisms, synthetic microswimmers, and self-propelling droplets - are known to self-organize into ordered structures at fluid-solid boundaries. Their mutual entrainment in the attractive component of the flow has been postulated as a possible mechanism underlying this phenomenon. In this work, we describe this fluid-induced phase separation by combining experiments, theory, and numerical simulations, and demonstrate its control by changing the hydrodynamic boundary conditions. We show that, for flow in Hele-Shaw cells, metastable lines or stable traveling bands of colloids can be obtained by varying the cell height, while for flow bounded by a plane, dynamic crystallites are formed. At a plane no-slip wall, these crystallites are characterized by a continuous out-of-plane flux of particles that circulate and re-enter at the crystallite edges, thereby stabilizing them, while the crystallites are strictly two-dimensional at a plane where the tangential stress vanishes. These results are elucidated by deriving, using the boundary-domain integral formulation of Stokes flow, exact expressions for dissipative, long-ranged, many-body active forces and torques between them in respective boundary conditions. The resulting numerical simulations of motion under the action of the active forces and torques are in excellent agreement with experiments. Our work demonstrates the control of phase separation of active particles by boundary conditions. . Vortex-stabilised crystallites at a plane no-slip surface . . Two-dimensional crystallites at a plane no-shear surface . . Traveling bands in a Hele-Shaw cell . . . . . Autophoretic arrest of flow-induced phase separation . Reference: R Singh, R Adhikari, ME Cates, The Journal of Chemical Physics 151, 044901 (2019) . Recent experiments have reported the arrest of phase separation in a suspension of active colloids at a plane wall. Attractive hydrodynamic forces are known to cause the aggregation of active colloids at a plane wall. This flow-induced phase separation, in absence of any other interactions, drives the system to a complete phase separation. Here, we describe the role of chemical interactions in modifying this flow-induced phase separation of active colloids at a plane wall. We derive chemohydrodynamic forces and torques on colloids in the limit of rapid diffusion and slow viscous flow. We find that near a plane wall, these forces can be expressed as a gradient of a non-equilibrium potential. This potential can be varied from being purely repulsive to purely attractive by tuning the chemical activity of the colloids. The arrest of phase separation can then be understood from the emergence of a barrier in the effective potential. . . . Active particles in external potentials . The simplest system in which an interplay of non-uniform external fields, activity and Brownian motion can be studied is an active colloid confined in a three-dimensional harmonic potential. We consider two examples: (a) active particles in a single trap, and (b) active particles in a lattice of harmonic traps (optical lattice). . Non-equilibrium convective rolls of confined active particles in a single harmonic trap . Reference: R Singh, S Ghose, R Adhikari, Journal of Statistical Mechanics: Theory and Experiment 2015 (6), P06017 (2015) . . Dynamics in an optical lattice . Reference: R Singh, R Adhikari, Journal of Physics Communications 2, 025025 (2018) . . Dynamics of 1024 contractile and extensile active colloids in a spherical confinement . Reference: R Singh, R Adhikari, Journal of Physics Communications 2, 025025 (2018) . In this examples we consider apolar particles confined in a sphere. We show that the dynamics is different for contractile and extensile particles respectively. . . . Electrohydrodynamic flows: self-assembly of nanoparticles . Reference: D Sarkar, R Singh, A Som, CK Manju, M Ganayee, R Adhikari, T Pradeep, The Journal of Physical Chemistry C 122, 17777 (2018) . In the work, we consider a suspension of driven particles. Unlike an active colloid, a driven colloid can move only under the effect of external potentials. Here, we study the motion of particles under electrohydrodynamic flow in a rectangular geometry. Electrohydrodynamics is the study of the effects of electrostatic forces on fluid flow. Electrohydrodynamic flows result from the motion of free charges on the surface of a fluid by application of a tangential electric field along with the container (Melcher and Taylor, Annu Rev Fluid Mech 1969). In our case, free charged ions are sprayed using electrospray on the air-liquid interface of a rectangular container with an electrode, which provides a tangential electric field. The spray from the cone deposits charges at the air-liquid interface which is then set into motion by the tangential electric field due to the electrode. Thus, the formation of nanoparticle-nanosheet (NP-NS) is observed at the air-liquid interface. . .",
            "url": "https://rajeshrinet.github.io/pystokes-blog/markdown/2020/07/19/gallery.html",
            "relUrl": "/markdown/2020/07/19/gallery.html",
            "date": " • Jul 19, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Stokes flow bounded by a plane surface",
            "content": "%%capture !pip install pystokes . %matplotlib inline import pystokes, numpy as np, matplotlib.pyplot as plt . # particle radius, self-propulsion speed, number and fluid viscosity b, vs, Np, eta = 1.0, 0.4, 2, 0.1 rbm = pystokes.wallBounded.Rbm(radius=b, particles=Np, viscosity=eta) forces = pystokes.forceFields.Forces(particles=Np) . def twoBodyDynamics(T=1): &quot;&quot;&quot;simulation of two active colloid near a wall in a fluid at temperature T&quot;&quot;&quot; #initial position and orientation r, p = np.array([-2.5,2.5, 0,0 , 2.5, 2.5]), np.array([0,0, 0,0, -1.0,-1.0]) # integration parameters and arrays Nt=2**17; x1=np.zeros(Nt); x2=np.zeros(Nt) x1[0], x2[0] = r[0], r[1]; dt=0.01; sqdt=np.sqrt(T*dt) F = np.zeros(3*Np); v = np.zeros(3*Np); vv = np.zeros(3*Np) F0 = 6*np.pi*eta*b*vs*(1+9*b/(8*r[4])); #active stall force # integration loop for i in range(Nt-1): forces.lennardJones(F,r,lje=.6,ljr=2.1); F[4],F[5]= F0, F0 rbm.mobilityTT(v, r, F) # Euler-Maryuama integration rbm.noiseTT(vv, r) x1[i+1] = x1[i] + dt*v[0] + sqdt*vv[0] x2[i+1] = x2[i] + dt*v[1] + sqdt*vv[1] #reset the variables for next time step r[0],r[1],v,vv,F[0:3] = x1[i+1], x2[i+1],v*0,vv*0,F[0:3]*0 return x1, x2 . T=([0, .1]); pystokes.utils.plotTrajectory(twoBodyDynamics, T, bins=32) .",
            "url": "https://rajeshrinet.github.io/pystokes-blog/jupyter/2020/07/19/crystalNucleation.html",
            "relUrl": "/jupyter/2020/07/19/crystalNucleation.html",
            "date": " • Jul 19, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Flow-induced phase separation of active colloids",
            "content": "%%capture !pip install pystokes . %matplotlib inline import pystokes import numpy as np, matplotlib.pyplot as plt . # particle radius, self-propulsion speed, number and fluid viscosity b, vs, Np, eta = 1.0, 1.0, 128, 0.1 #initialise r = pystokes.utils.initialCondition(Np) # initial random distribution of positions p = np.zeros(3*Np); p[2*Np:3*Np] = -1 # initial orientation of the colloids . def rhs(rp): &quot;&quot;&quot; right hand side of the rigid body motion equation rp: is the array of position and orientations of the colloids returns the dot{rp} so that rp can be updated using an integrator orientations are not evolved in this example &quot;&quot;&quot; # assign fresh values at each time step r = rp[0:3*Np]; p = rp[3*Np:6*Np] F, v, o = np.zeros(3*Np), np.zeros(3*Np), np.zeros(3*Np) force.lennardJonesWall(F, r, lje=0.01, ljr=5, wlje=1.2, wljr=3.4) rbm.mobilityTT(v, r, F) V1s = vs*p; V3t=0.6*V1s; rbm.propulsionT3t(v, r, V3t); v = v + V1s return np.concatenate( (v,o) ) . Crystallization at plane no-slip wall . rbm = pystokes.wallBounded.Rbm(radius=b, particles=Np, viscosity=eta) force = pystokes.forceFields.Forces(particles=Np) # simulate the resulting system Tf, Npts = 150, 200 pystokes.utils.simulate(np.concatenate((r,p)), Tf,Npts,rhs,integrator=&#39;odeint&#39;, filename=&#39;crystallization&#39;) # plot the data at specific time instants pystokes.utils.plotConfigs(t=[1, 40, 100, 200], ms=60, tau=(Tf/Npts)/(b/vs), filename=&#39;crystallization&#39;) . Crystallization at plane no-shear interface . rbm = pystokes.interface.Rbm(radius=b, particles=Np, viscosity=eta) force = pystokes.forceFields.Forces(particles=Np) # simulate the resulting system Tf, Npts = 150, 200 pystokes.utils.simulate(np.concatenate((r,p)), Tf,Npts,rhs,integrator=&#39;odeint&#39;, filename=&#39;crystallization&#39;) # plot the data at specific time instants pystokes.utils.plotConfigs(t=[1, 40, 100, 200], ms=60, tau=(Tf/Npts)/(b/vs), filename=&#39;crystallization&#39;) .",
            "url": "https://rajeshrinet.github.io/pystokes-blog/jupyter/2020/07/18/crystallization.html",
            "relUrl": "/jupyter/2020/07/18/crystallization.html",
            "date": " • Jul 18, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Phoretic field",
            "content": "%%capture !pip install pystokes . %matplotlib inline # ex5.py: chemical field of an autphoretic colloid - unbounded domain (first row) and near a wall (second) import pystokes, numpy as np, matplotlib.pyplot as plt # particle radius, fluid viscosity, and number of particles b, D, Np = 1.0, 1.0/6.0, 1 #initialise r, p = np.array([0.0, 0.0, 5]), np.array([0.0, 0.0, 1]) # irreducible coeffcients J0 = 10*np.ones(Np); J1 = pystokes.utils.irreducibleTensors(1, p) J2 = pystokes.utils.irreducibleTensors(2, p) # space dimension , extent , discretization dim, L, Ng = 3, 10, 64; # instantiate the phoretic field class class ufield = pystokes.phoreticUnbounded.Field(radius=b, particles=Np, phoreticConstant=D, gridpoints=Ng*Ng) wfield = pystokes.phoreticWallBounded.Field(radius=b, particles=Np, phoreticConstant=D, gridpoints=Ng*Ng) # plot using subplots on a given grid rr, vv = pystokes.utils.gridYZ(dim, L, Ng) plt.figure(figsize=(24, 8), edgecolor=&#39;gray&#39;, linewidth=4) plt.subplot(231); vv=vv*0; ufield.phoreticField0(vv, rr, r, J0) pystokes.utils.plotContoursYZ(vv, rr, r, offset=1e-1, title=&#39;m=0&#39;) plt.subplot(232); vv=vv*0; ufield.phoreticField1(vv, rr, r, J1) pystokes.utils.plotContoursYZ(vv, rr, r, offset=1e-3, title=&#39;m=1&#39;) plt.subplot(233); vv=vv*0; ufield.phoreticField2(vv, rr, r, J2) pystokes.utils.plotContoursYZ(vv, rr, r, offset=4e2, title=&#39;m=2&#39;) plt.subplot(234); vv=vv*0; wfield.phoreticField0(vv, rr, r, J0) pystokes.utils.plotContoursYZsurf(vv, rr, r, offset=1e-2,) plt.subplot(235); vv=vv*0; wfield.phoreticField1(vv, rr, r, J1) pystokes.utils.plotContoursYZsurf(vv, rr, r, offset=1e-3) plt.subplot(236); vv=vv*0; wfield.phoreticField2(vv, rr, r, J2) pystokes.utils.plotContoursYZsurf(vv, rr, r, offset=3e3) .",
            "url": "https://rajeshrinet.github.io/pystokes-blog/jupyter/2020/07/16/phoreticField.html",
            "relUrl": "/jupyter/2020/07/16/phoreticField.html",
            "date": " • Jul 16, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "Phoretic arrest of flow-induced phase separation",
            "content": "%%capture !pip install pystokes . %matplotlib inline import pystokes import numpy as np, matplotlib.pyplot as plt . # particle radius, self-propulsion speed, number and fluid viscosity b, vs, Np, eta = 1.0, 1.0, 256, 0.1 #initialise r = pystokes.utils.initialCondition(Np) # initial random distribution of positions p = np.zeros(3*Np); p[2*Np:3*Np] = -1 # initial orientation of the colloids . rbm = pystokes.wallBounded.Rbm(radius=b, particles=Np, viscosity=eta) phoresis = pystokes.phoreticWallBounded.Phoresis(radius=b, particles=Np, phoreticConstant=eta) forces = pystokes.forceFields.Forces(particles=Np) . N1, N2 = 3*Np, 6*Np # define two constants for convenience def rhs(rp): &quot;&quot;&quot; * right hand side of the rigid body motion equations * rp: is the array of position (r) and orientations (p) of the colloids * returns dot{rp} so that rp can be updated using an integrator &quot;&quot;&quot; r = rp[0:N1]; p = rp[N1:N2]; F,v,o,C1 = np.zeros(N1),np.zeros(N1),np.zeros(N1),np.zeros(N1) forces.lennardJonesWall(F, r, lje=0.012, ljr=5, wlje=1.2, wljr=3.4) rbm.mobilityTT(v, r, F) # rbm contributions from body forces #phoretic field on the surface of colloids J0, J1 = .4*np.ones(Np), pystokes.utils.irreducibleTensors(1, p) phoresis.elastance10(C1, r, J0); phoresis.elastance11(C1, r, J1) # active contributions to the rbm M0=1; V1s=-pystokes.utils.couplingTensors(0, p, M0)*C1; V3t=0.6*V1s rbm.propulsionT3t(v, r, V3t); v += V1s return np.concatenate( (v,o) ) # simulate the resulting system Tf, Npts = 256, 256 pystokes.utils.simulate(np.concatenate((r,p)), Tf,Npts,rhs,integrator=&#39;odeint&#39;, filename=&#39;arrestedClusters&#39;) . # plot the data at specific time instants pystokes.utils.plotConfigs(t=[1, 64, 128, 256], ms=60, tau=(Tf/Npts)/(b/vs), filename=&#39;arrestedClusters&#39;) .",
            "url": "https://rajeshrinet.github.io/pystokes-blog/jupyter/2020/07/12/arrestedCluster.html",
            "relUrl": "/jupyter/2020/07/12/arrestedCluster.html",
            "date": " • Jul 12, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "Simulating holographic traps of active particles",
            "content": "%%capture !pip install pystokes . Synchronization of active colloids in a 2D lattice of harmonic traps . Here, we study the dynamics of spherical active colloids of radius $b$ in a two-dimensional lattice of traps. We consider self-propelling, polar, achiral active colloids, with non-zero values of $ mathbf{V}_{i}^{ mathcal{A}}, mathbf{V}_{i}^{(2s)}$ and $ mathbf{V}_{i}^{(3t)}$. With this choice, an isolated colloid translates with velocity $ mathbf{V}_{i}^{ mathcal{A}}=v_{s} boldsymbol{p}_{i}$ while producing dipolar and quadrupolar flows of strengths proportional to $ mathbf{V}_{i}^{(2s)}$ and $ mathbf{V}_{i}^{(3t)}$ respectively. . The system we study can be realized experimentally in holographic tweezers. The centers of the $N$ traps are at $ boldsymbol{R}_{i}^{0}$, arranged linearly or in a $ sqrt{N} times sqrt{N}$ square lattice. Each trap contains a single active colloid which feels a body force from that trap alone. The moment of force about the trap center is zero. Therefore, in a trap of stiffness $k$ centered at $ boldsymbol{R}_{i}^{0}$, the force and torque on the ith colloid is . $$ mathbf{F}_{i}^{P}=-k( boldsymbol{R}_{i}- boldsymbol{R}_{i}^{0}), qquad mathbf{T}_{i}^{P}=0. $$We start by ignoring hydrodynamic interactions to obtain the balance of forces and torques . $$ -6 pi eta b( mathbf{V}_{i}-v_{s} boldsymbol{p}_{i})-k( boldsymbol{R}_{i}- boldsymbol{R}^{0}) =0, qquad-8 pi eta b^{3} , mathbf{ Omega}_{i}=0. $$This gives the confinement radius $R^{*}=6 pi eta bv_{s}/k= mathcal{A}_{T}b$, when the propulsive and trap forces are balanced. This is the stable state of the system in absence of hydrodynamic interactions. We now study the effects of hydrodynamic interaction using PyStokes. More details of the model etc can be found in section VII of the paper. . %matplotlib inline import numpy as np import scipy.io as sio import matplotlib.pyplot as plt import matplotlib.patches as patches import pystokes . DTYPE = np.float class trap: def __init__(self, a, Np, vs, eta, dim, S0, D0, k, ljeps, ljrmin): self.a = a self.Np = Np self.vs = vs self.eta = eta self.dim = dim self.S0 = S0 self.D0 = D0 self.mu = 1.0/(6*np.pi*self.eta*self.a) self.k = k self.ljrmin = ljrmin self.ljeps = ljeps self.dX = np.zeros( 6*self.Np, dtype=DTYPE) self.uRbm = pystokes.unbounded.Rbm(self.a, self.Np, self.eta) def initialise(self, initialConfig, trapCentre): self.rp0 = initialConfig self.trapCentre = trapCentre return def rhs(self, rp): Np = self.Np xx=2*Np; vs = self.vs r = rp[0:3*Np] p = rp[3*Np:6*Np] F = - self.k*(r-trapCentre) v = r*0; o=r*0; self.uRbm.mobilityTT(v, r, F) self.uRbm.mobilityRT(o, r, F) self.dX[0:3*Np] = vs*p + v self.dX[3*Np:4*Np] = o[Np:2*Np ]*p[2*Np:3*Np] - o[2*Np:3*Np]*p[Np:2*Np] self.dX[4*Np:5*Np] = o[2*Np:3*Np]*p[0:Np ] - o[0:Np ]*p[2*Np:3*Np] self.dX[5*Np:6*Np] = o[0:Np ]*p[Np:2*Np ] - o[Np:2*Np ]*p[0:Np ] return self.dX def simulate(self, dt, N): &#39;&#39;&#39;run simulation and save data&#39;&#39;&#39; X = np.zeros( (N+1, 6*self.Np), dtype=DTYPE) X[0, :] = self.rp0 for i in range(N): X[i+1, :] = X[i, :] + self.rhs(X[i, :])*dt sio.savemat(&#39;Np=%s_vs=%4.4f_K=%4.4f.mat&#39;%(self.Np, self.vs, self.k), {&#39;trapCentre&#39;:self.trapCentre, &#39;X&#39;:X, &#39;t&#39;:dt, &#39;Np&#39;:self.Np,&#39;k&#39;:self.k, &#39;vs&#39;:self.vs, &#39;S0&#39;:self.S0,}) return . ## parameters and initial conditions Np = 9 # number of particles vs = 1 # self-propulsion speed A = 2 # number vs/k k = vs/A # stiffness of the trap a0 = 40 # separation of trap centers dim = 3 # dimensionality of the problem eta = 1.0/6 # viscosity of the fluid simulated b = 1 # radius of the particle S0, D0 = 0.01, 0.01 # strength of the stresslet and potDiple ljrmin, ljeps = 3, .01 # lennard-jones parameters dt, Npts = 10, 200 # final time and number of points # instantiate the class trap from trap.pyx for simulation rm = trap(b, Np, vs, eta, dim, S0, D0, k, ljeps, ljrmin) # set initial condition def initialConfig(rp0, trapCentre, theta, b, a0, vs, k, Np): &#39;&#39;&#39;method for preparing an initial system&#39;&#39;&#39; rr = (6*np.pi*eta*vs*b)/k # confinement radius t1 = np.pi/180 if Np==1: rp0[0], rp0[1], rp0[2] = 0, 0, 8 # Position rp0[3], rp0[4], rp0[5] = 0, 0, -1 # Orientation elif Np==3: trapCentre[0], trapCentre[3] = 0, 0 trapCentre[1], trapCentre[4] = a0, a0 trapCentre[2], trapCentre[5] = -a0, a0 theta[0:3] = 90*np.pi/180 for i in range(Np): rp0[i ] = trapCentre[i ] + rr*np.cos(theta[i]) rp0[i+Np ] = trapCentre[i+Np] + rr*np.sin(theta[i]) rp0[i+3*Np] = np.cos(theta[i]) rp0[i+4*Np] = np.sin(theta[i]) else: Np1d = np.int(np.round( (Np)**(1.0/2))) nnd = Np1d/2 - 0.5; h0=0 Np= np.int(Np1d*Np1d) for i in range(Np1d): for j in range(Np1d): ii = i*Np1d + j trapCentre[ii] = a0*(-nnd + i) trapCentre[ii+Np] = a0*(-nnd + j) trapCentre[ii+2*Np] = h0 theta = np.ones(Np)*np.pi/2 #theta = np.random.random(Np)*np.pi/2 for i in range(Np): rp0[i ] = trapCentre[i ] + rr*np.cos(theta[i]) rp0[i+Np ] = trapCentre[i+Np] + rr*np.sin(theta[i]) rp0[i+3*Np] = np.cos(theta[i]) rp0[i+4*Np] = np.sin(theta[i]) rp0 = np.zeros(6*Np) # memory allocation for positions and orientation of colloids trapCentre = np.zeros(3*Np) # memory allocation for trap centers theta = np.zeros(Np) # angle of the colloids about the trap centers initialConfig(rp0, trapCentre, theta, b, a0, vs, k, Np) rm.initialise(rp0, trapCentre) . # simulate the system and save data rm.simulate(dt, Npts) . Load the data and plot snapshots . data = sio.loadmat(&#39;Np=9_vs=1.0000_K=0.5000.mat&#39;) X = data[&#39;X&#39;] tm = data[&#39;t&#39;] k = data[&#39;k&#39;] vs = data[&#39;vs&#39;] Np = data[&#39;Np&#39;] tC = data[&#39;trapCentre&#39;] . rr = (6*np.pi*eta*vs*b)/k # confinement radius fig = plt.figure(figsize=(24, 8)); def plotConfig(n, n_): ax = fig.add_subplot(1, 5, n_, aspect=&#39;equal&#39;, ) for i in range(int(Np)): ax.add_patch(patches.Circle((tC[0, i], tC[0, i+Np]), rr, color=&#39;#348abd&#39;, alpha=0.32)) x, y = X[n,i], X[n,Np+i] px, py = X[n,3*Np+i], X[n,4*Np+i] plt.quiver(x,y,px,py) plt.title(&#39;Time=%d&#39;%n, fontsize=20); plt.axis(&#39;off&#39;) plotConfig(0, 1) plotConfig(10, 2) plotConfig(100, 3) plotConfig(200, 4) .",
            "url": "https://rajeshrinet.github.io/pystokes-blog/jupyter/2018/02/02/holographicTrap.html",
            "relUrl": "/jupyter/2018/02/02/holographicTrap.html",
            "date": " • Feb 2, 2018"
        }
        
    
  
    
        ,"post8": {
            "title": "Benchmarks of PyStokes",
            "content": "%%capture !pip install pystokes . %matplotlib inline import numpy as np, matplotlib.pyplot as plt, pystokes, time, matplotlib as mpl def timeTaken(Np): b, vs, eta = 1.0, 1.0, 0.1; r = 2*np.linspace(-3*Np, 3*Np, 3*Np) p, v = np.ones(3*Np), np.zeros(3*Np) RBM = pystokes.wallBounded.Rbm(radius=b, particles=Np, viscosity=eta) V3t = p; t1 = time.perf_counter(); RBM.propulsionT3t(v, r, p) return time.perf_counter() - t1 xP = np.arange(2000, 21000, 2000) tP1 = np.zeros(np.size(xP)) for i in range(np.size(xP)): tP1[i]=timeTaken(xP[i]) . plt.figure(figsize=(16, 14)) mpl.rc(&#39;hatch&#39;, color=&#39;k&#39;, linewidth=22.5) mss=24; plt.xticks(fontsize=mss); plt.yticks(fontsize=mss) plt.semilogy(xP, tP1, &#39;-*&#39;, ms=mss+3, label=&quot;1 Core&quot;, lw=3, color=&#39;lightslategray&#39;, mfc=&#39;w&#39;, mew=2, alpha=1) plt.legend(fontsize=mss, loc=4) plt.xlabel(&#39; colloids (thousands)&#39;, fontsize=mss+5) plt.ylabel(&#39;CPU time (secs)&#39;, fontsize=mss+5) plt.grid() . Plot a precompiled set of benchmarks . plt.figure(figsize=(20, 12), edgecolor=&#39;gray&#39;, linewidth=4) import matplotlib as mpl mpl.rc(&#39;hatch&#39;, color=&#39;k&#39;, linewidth=22.5) x1= ([1, 5, 10, 15]); x2=np.arange(20,110,10); x = np.concatenate((x1, x2)) y1 = ([.081,.32, 1.28, 2.81, 4.968, 11.20, 19.7496, 31.04, 44.41, 60.92, 78.961, 100.524, 123.369]); y2 = ([.036,.174,.697, 1.52, 2.683, 5.585, 10.374, 15.562, 23.411, 30.523, 41.431, 50.708, 64.685]); y4 = ([.025,.100,.400, .77,1.371, 2.921, 5.271, 8.060, 12.013, 15.831, 21.226, 26.603, 32.934]); y8 = ([.0133,.055,.222, .41,0.700, 1.530, 2.743, 4.271, 6.197, 8.341, 11.0167, 13.838, 17.252]); y16 = ([.0093, .031,.111, .22, 0.380, 0.800, 1.447, 2.202, 3.180, 4.304, 5.609, 7.182, 8.794]); mss=24; plt.xticks(fontsize=mss); plt.yticks(fontsize=mss) plt.semilogy(x, y1, &#39;-*&#39;, ms=mss+3, label=&quot;1 Core&quot;, lw=3, color=&#39;gray&#39;, mfc=&#39;w&#39;, mew=2, alpha=1) plt.semilogy(x, y2, &#39;-&lt;&#39;, ms=mss-3, label=&quot;2 Cores&quot;, lw=3,mfc=&#39;w&#39;, color=&#39;slategray&#39;, mew=2) plt.semilogy(x, y4, &#39;-p&#39;, ms=mss-2, label=&quot;4 Cores&quot;, lw=3, color=&#39;dimgray&#39;,mfc=&#39;w&#39;, mew=2) plt.semilogy(x, y8, &#39;-s&#39;, ms=mss-6, label=&quot;8 Cores&quot;, lw=3,mfc=&#39;w&#39;, color=&#39;lightslategray&#39;, mew=2) plt.semilogy(x, y16, &#39;-o&#39;, ms=mss-3, label=&quot;16 Cores&quot;, lw=3,mfc=&#39;w&#39;, color=&#39;silver&#39;, mew=2) plt.legend(fontsize=mss+10, loc=4) plt.xlabel(&#39; Number of colloids (thousands)&#39;, fontsize=mss+10) plt.ylabel(&#39;CPU time (secs)&#39;, fontsize=mss+10) plt.grid() . pystokes.utils.plotLogo() .",
            "url": "https://rajeshrinet.github.io/pystokes-blog/jupyter/2018/01/10/benchmark.html",
            "relUrl": "/jupyter/2018/01/10/benchmark.html",
            "date": " • Jan 10, 2018"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": ". . PyStokes is a numerical library for phoresis and Stokesian hydrodynamics in Python. The library has been specifically designed for studying phoretic and hydrodynamic interactions in suspensions of active particles, which are distinguished by their ability to produce flow, and thus motion, in the absence of external forces or torques. Such particles are endowed with a mechanism to produce hydrodynamic flow in a thin interfacial layer, which may be due to the motion of cilia, as in microorganisms (Brennen &amp; Winet, 1977) or osmotic flows of various kinds in response to spontaneously generated gradients of phoretic fields (Ebbens &amp; Howse, 2010). The latter, often called autophoresis, is a generalisation of wellknown phoretic phenomena including, inter alia, electrophoresis (electric field), diffusiophoresis (chemical field) and thermophoresis (temperature field) that occur in response to externally imposed gradients of phoretic fields (Anderson, 1989). . Hydrodynamic and phoretic interactions between active particles in a viscous fluid are central to the understanding of their collective dynamics. Under experimentally relevant conditions, the motion of the fluid is governed by the Stokes equation and that of the phoretic field, if one is present, by the Laplace equation. The “activity” appears in these equations as boundary conditions on the particle surfaces that prescribe the slip velocity in the Stokes equation and flux of the phoretic field in the Laplace equation . . The slip velocity and the phoretic flux are related by a linear constitutive law that can be derived from a detailed analysis of the boundary layer physics (Anderson, 1989). The Stokes and Laplace equations are coupled by this linear constitutive law only at the particle boundaries. The linearity of the governing equations and the coupling boundary conditions allows for a formally exact solution of the problem of determining the force per unit area on the particle surfaces. This formally exact solution can be approximated to any desired degree of accuracy by a truncated series expansion in a complete basis of functions on the particle boundaries. This, in turn, leads to an efficient and accurate numerical method for computing hydrodynamic and phoretic interactions between active particles. . .",
          "url": "https://rajeshrinet.github.io/pystokes-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rajeshrinet.github.io/pystokes-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}